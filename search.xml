<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Gitee+PicGo图床搭建</title>
    <url>/2021/04/24/Gitee+PicGo%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Gitee-PicGo图床搭建"><a href="#Gitee-PicGo图床搭建" class="headerlink" title="Gitee+PicGo图床搭建"></a>Gitee+PicGo图床搭建</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol>
<li><a class="link"   href="https://github.com/Molunerfinn/PicGo/releases" >PicGo<i class="fas fa-external-link-alt"></i></a>(请确保你安装了 Node.js， 并且版本 &gt;= 8)</li>
<li><a class="link"   href="https://www.typora.io/" >Typora<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p><a class="link"   href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html" >PicGo使用文档<i class="fas fa-external-link-alt"></i></a></p>
<p>安装上面两个软件</p>
<h2 id="PicGo配置Gitee"><a href="#PicGo配置Gitee" class="headerlink" title="PicGo配置Gitee"></a>PicGo配置Gitee</h2><ol>
<li>打开安装好的PicGo</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424000121069.png" alt="image-20210424000121069"></p>
<p>2.选择插件设置，搜索gitee</p>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424000506412.png" alt="image-20210424000506412"></p>
<p>3.选择gitee-uploader插件，安装</p>
<p>4.建立<a class="link"   href="https://gitee.com/" >gitee<i class="fas fa-external-link-alt"></i></a>图床库</p>
<p>如果没gitee账号，注册一个</p>
<ul>
<li>新建仓库</li>
</ul>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424001147170.png" alt="image-20210424001147170"></p>
<ul>
<li>仓库创建过程，最后点击创建</li>
</ul>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424001501132.png" alt="image-20210424001501132"></p>
<p>5.生成Gitee的token</p>
<ul>
<li>打开设置</li>
</ul>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424001927167.png" alt="image-20210424001927167"></p>
<ul>
<li>选择私人令牌</li>
</ul>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424002003827.png" alt="image-20210424002003827"></p>
<ul>
<li><p>点击生成新令牌，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交，会生成一个token，复制到笔记中，记录下来</p>
<blockquote>
<p>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，复制保存起来</p>
</blockquote>
</li>
</ul>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424002151914.png" alt="image-20210424002151914"></p>
<ol start="6">
<li>配置PicGo</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424002655410.png" alt="image-20210424002655410"></p>
<ul>
<li><p>repo：用户名/仓库名称，比如仓库carrywl/image-hosting，找不到的可以直接复制仓库的url</p>
</li>
<li><p>branch：分支，这里写上master</p>
</li>
<li><p>token：填入生成的私人令牌</p>
</li>
<li><p>path：存储图片的路径，一般写上img</p>
</li>
<li><p>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></p>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li>打开Typora</li>
<li>文件==偏好设置==图像</li>
<li>在上传图像设置PicGo</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424004444021.png" alt="image-20210424004444021"></p>
<ol start="4">
<li>点击验证图片上传</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210424003656340.png" alt="image-20210424003656340"></p>
<p>截图粘贴到Typora时，图片会被默认存到C盘，可以定时清理：C:\Users\你电脑的用户名\AppData\Roaming\Typora\typora-user-images</p>
<blockquote>
<p>参考文章</p>
<ul>
<li><a class="link"   href="https://blog.csdn.net/disILLL/article/details/103962241" >https://blog.csdn.net/disILLL/article/details/103962241<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2021/05/29/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>gitee地址：<a class="link"   href="https://gitee.com/carrywl/java-basic.git" >https://gitee.com/carrywl/java-basic.git<i class="fas fa-external-link-alt"></i></a></p>
<p>八大基本类型 byte,short,char==int==long==float==double boolean</p>
<h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><p>next和nextLine区别：</p>
<p>next：</p>
<ul>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>对输入有效字符之前遇到的空白，next会自动将其去掉</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或结束符</li>
<li><strong>next不能得到带有空格的字符串</strong></li>
</ul>
<p>nextLine:</p>
<ul>
<li>以Enter为结束符</li>
<li>可以获得空白</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    Scanner scanner1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;next请输入:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">        String str = scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;next接受:&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;nextLine请输入:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(scanner1.hasNext())&#123;</span><br><span class="line">        String str = scanner1.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine接受:&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//凡是属于IO流的如果不关闭就会占用资源</span></span><br><span class="line">    scanner.close();</span><br><span class="line">    scanner1.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210502224706949.png" alt="image-20210502224706949"></p>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul>
<li>在指定参数类型后加一个省略号</li>
<li>一个方法只能声明一个可变参数，而且必须放到最后位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       printMax(<span class="number">34</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">       printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... num)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (num.length == <span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">double</span> result = num[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; num.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (num[i] &gt; result)&#123;</span><br><span class="line">               result = num[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;The max value is &quot;</span>+result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.println(f(<span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算器练习"><a href="#计算器练习" class="headerlink" title="计算器练习"></a>计算器练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器，要求实现加减乘除功能，并且能够循环接收新的数据，通过用户交互实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写4个方法:加减乘除</span></span><br><span class="line"><span class="comment">     * 利用循环+ switch进行用户交互</span></span><br><span class="line"><span class="comment">     * 传递需要操作的两个数</span></span><br><span class="line"><span class="comment">     * 输出结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> num1 = scanner.nextDouble();;</span><br><span class="line">            String mark = scanner.next();</span><br><span class="line">            <span class="keyword">double</span> num2 = scanner.nextDouble();</span><br><span class="line">            <span class="keyword">switch</span>(mark)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    add(num1,num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    minus(num1,num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    multiply(num1,num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    except(num1,num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请正确输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;输出任意字母退出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        System.out.println(num1+num2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">minus</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        System.out.println(num1-num2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        System.out.println(num1*num2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">except</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num2 == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分母不可为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(num1/num2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210516223527021.png" alt="image-20210516223527021"></p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol>
<li>比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</li>
<li>每一次比较，都会产生出一个最大，或者最小的数字</li>
<li>下一轮则可以少一次循环</li>
<li>依次循环，直到结束</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//内层循环，比较两个数，如果第一个比第二个树大，那么交换位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j+<span class="number">1</span>] &gt; array[j])&#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>本质：以类的方式组织代码，以对象的组织（封装）数据。</p>
<p>三大特性：封装、继承、多态</p>
<ul>
<li>super注意点：</li>
</ul>
<ol>
<li>super调用父类的构造方法，必须在构造方法的第一个</li>
<li>super必须只能出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造方法</li>
</ol>
<ul>
<li><p>super和this不同：</p>
<p>代表的对象不同：</p>
<p>​        this:本身调用者这个对象</p>
<p>​        super:代表父类对象的应用    </p>
<p>前提：</p>
<p>​        this:没有继承也可以使用</p>
<p>​        super:只能在继承的条件下使用</p>
<p>构造方法：</p>
<p>​        this():本来的构造</p>
<p>​        super():父类的构造</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/05/15/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ul>
<li>查看docker容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash">显示所有的容器，包括未运行的</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<ul>
<li>进入nginx内部</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">容器ID 也就是CONTAINER ID 可以通过docker ps来查看</span></span><br><span class="line">docker exec -it 容器ID bash</span><br></pre></td></tr></table></figure>

<ul>
<li>将本地的文件放入docker容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 文件路径 容器ID:docker容器地址</span><br></pre></td></tr></table></figure>

<ul>
<li>启动一个nginx容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name nginx-8080 nginx</span><br></pre></td></tr></table></figure>

<p>-p：设置端口映射，8080:80表示将本地的8080端口映射到容器内部的80端口</p>
<p>-d：表示设置容器在后台运行</p>
<p>–name：表示设置容器名称</p>
<ul>
<li>关闭一个nginx容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">names代表设置容器名称</span></span><br><span class="line">docker stop names|容器ID</span><br></pre></td></tr></table></figure>

<ul>
<li>启动一个已经停止的nginx容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start names|容器ID</span><br></pre></td></tr></table></figure>

<ul>
<li>构建镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名称 .</span><br></pre></td></tr></table></figure>

<ul>
<li>查看日志</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-f : 查看实时日志</span></span><br><span class="line">docker logs -f 容器名称</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/2021/05/18/Spring%20Boot/</url>
    <content><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><ul>
<li><p>打包指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2021/06/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><ol>
<li>继承Thread类</li>
</ol>
<p>继承Thread类，重写run()方法，调用start开启线程</p>
<p>不建议使用：避免OOP单继承局限性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在写代码。。。&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread01 testThread01 = <span class="keyword">new</span> TestThread01();</span><br><span class="line">        <span class="comment">//调用start开启线程</span></span><br><span class="line">        testThread01.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码。。。&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210530145537199.png" alt="image-20210530145537199"></p>
<p>注意：线程开启不一定立即执行，由CPU调度执行</p>
<ol start="2">
<li>实现Runnable接口</li>
</ol>
<p>实现runnable接口，重写run方法，执行线程需要runnable接口实现类，调用start方法</p>
<p>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread03</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start开启。。。&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">        TestThread03 testThread03 = <span class="keyword">new</span> TestThread03();</span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启线程，代理</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testThread03);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程。。。&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实现Callable接口</li>
</ol>
<p>优点：可以定义返回值；可以抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">//保存文件名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloaderCallable webDownloaderRunnable = <span class="keyword">new</span> WebDownloaderCallable();</span><br><span class="line">        webDownloaderRunnable.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件名为:&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/avatar.jpeg&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/weChat-Code.jpg&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/QQ图片20200809153256.jpg&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloaderCallable</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>总结：</p>
<ol>
<li>真实对象和代理对象都要实现同一个接口interface</li>
<li>代理对象要代理真实角色</li>
</ol>
<p>好处：</p>
<ol>
<li>代理对象可以做很多真实对象做不了的事情</li>
<li>真实对象专注做自己的事情</li>
</ol>
<p>线程与静态代理对比：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">&quot;要结婚了！！！&quot;</span>);).start();</span><br><span class="line"><span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You()).HappyMarry();</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>总结：</p>
<ul>
<li>Lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</li>
<li>前提是接口为函数式接口，只有一个方法</li>
<li>多个参数也可以去除参数类型，必须加括号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类--Lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ilike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.Lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.Lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类--Lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.Lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类 没有名称 必须借助接口或者父类</span></span><br><span class="line">        like = <span class="keyword">new</span> Ilike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类--Lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.Lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda</span></span><br><span class="line">        like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Lambda5&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.Lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210601213700674.png" alt="image-20210601213700674"></p>
<p>线程停止：</p>
<p>建议要自己设置一个标志位，来停止线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>  flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...&quot;</span>+ i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThreadStop testThreadState = <span class="keyword">new</span> TestThreadStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testThreadState).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main...&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>)&#123;</span><br><span class="line">                testThreadState.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>线程插队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;VIP来了&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThreadJoin testThreadJoin = <span class="keyword">new</span> TestThreadJoin();</span><br><span class="line">        Thread thread  = <span class="keyword">new</span> Thread(testThreadJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">50</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    thread.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main...&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>线程休眠：</p>
<p><strong>每个对象都有一把锁，sleep不会释放🔒</strong></p>
<p>观察线程状态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadState</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;休眠结束&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        <span class="comment">//NEW</span></span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        <span class="comment">//RUNNABLE</span></span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                state = thread.getState();</span><br><span class="line">                System.out.println(state);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>优先级低只是说明获得调度的概率低，并不是优先级低就不会被调用了。这些都看CPU调度。</p>
<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><ul>
<li>线程分为<strong>用户进程</strong> 和<strong>守护进程</strong></li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>
</ul>
<h2 id="同步方法和同步块"><a href="#同步方法和同步块" class="headerlink" title="同步方法和同步块"></a>同步方法和同步块</h2><p>同步方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> args)</span></span>&#123;&#125;	</span><br></pre></td></tr></table></figure>

<p>synchronized控制对“对象”访问，每个对象对应一把锁，每个synchronized都必须获得调用该方法的对象的锁才可以执行，否则会线程阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p>
<p><strong>缺点</strong>：若将一个大的方法申明为synchronized将会影响效率</p>
<p>同步块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">    <span class="comment">//obj是同步监视器，可以是任何对象，但是推荐使用共享资源作为同步监视器</span></span><br><span class="line">    <span class="comment">//同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步监视器的执行过程：</p>
<ol>
<li>第一个线程访问，锁定同步监视器，执行其中代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>产生死锁的必要条件：</p>
<ol>
<li>互斥：一个资源每次只能被一个进程使用</li>
<li>请求和保持：一个进程因请求资源而阻塞，对已获得的资源保持不放</li>
<li>不剥夺：进程已获得资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待：若干进程之间形成一种头尾相接的循环等待资源关系</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2021/07/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查找具体某个端口号</span></span><br><span class="line">netstat -ano|findstr &quot;1900&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看指定端口的进程</span></span><br><span class="line">tasklist|findstr &quot;5200&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/07/24/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ul>
<li><p>反向代理</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>动静分离</p>
</li>
</ul>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><ol>
<li><p><strong>安装gcc</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></li>
<li><p><strong>PCRE pcre-devel 安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure></li>
<li><p><strong>zlib安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></li>
<li><p><strong>OpenSSL 安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li>
<li><p>手动下载.tar.gz安装包，地址：<a class="link"   href="https://nginx.org/en/download.html" >https://nginx.org/en/download.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">看本机是否已经装过nginx</span></span><br><span class="line">whereis nginx</span><br><span class="line"></span><br><span class="line">-- 安装包上传到linux的usr/local目录下</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到nginx目录,自动配置</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span> </span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>注：./configure执行成功</p>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210726172108304.png" alt="configure报错"></p>
<h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="meta">#</span><span class="bash">安全退出</span></span><br><span class="line">./nginx -s quit</span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置文件</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">查看nginx进程</span></span><br><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure>



<p>连接失败，检查端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开放80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数解释</span></span><br><span class="line">1、firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line">2、--permanent：表示设置为持久；</span><br><span class="line">3、--add-port：标识添加的端口；</span><br></pre></td></tr></table></figure>



<h2 id="nginx开机自启动"><a href="#nginx开机自启动" class="headerlink" title="nginx开机自启动"></a>nginx开机自启动</h2><ol>
<li>创建nginx.service文件，并编辑</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">服务的说明</span></span><br><span class="line">[Unit]</span><br><span class="line"><span class="meta">#</span><span class="bash">描述服务</span></span><br><span class="line">Description=nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">描述服务类别</span></span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">服务运行参数的设置</span></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta">#</span><span class="bash">后台运行的形式</span></span><br><span class="line">Type=forking</span><br><span class="line"><span class="meta">#</span><span class="bash">运行命令</span></span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">重启命令</span></span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">停止命令</span></span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line"><span class="meta">#</span><span class="bash">表示给服务分配独立的临时空间</span></span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行级别下服务安装的相关设置</span></span><br><span class="line">[Install]</span><br><span class="line"><span class="meta">#</span><span class="bash">多用户，即系统运行级别为3</span></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>加入开机自启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>辅助命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#取消开机自动</span><br><span class="line">systemctl disable nginx</span><br><span class="line"> </span><br><span class="line">#启动</span><br><span class="line">systemctl start nginx.service</span><br><span class="line"> </span><br><span class="line">#停止</span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"></span><br><span class="line">#重新启动服务</span><br><span class="line">systemctl restart nginx.service　       </span><br><span class="line">#查看所有已启动的服务</span><br><span class="line">systemctl list-units --type&#x3D;service</span><br><span class="line"></span><br><span class="line">#查看服务当前状态</span><br><span class="line">systemctl status nginx.service          </span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章：<a class="link"   href="https://www.cnblogs.com/jepson6669/p/9131217.html" >https://www.cnblogs.com/jepson6669/p/9131217.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux指令</title>
    <url>/2021/08/03/Linux%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="文件管理指令"><a href="#文件管理指令" class="headerlink" title="文件管理指令"></a>文件管理指令</h2><h3 id="创建文件touch"><a href="#创建文件touch" class="headerlink" title="创建文件touch"></a>创建文件touch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">touch [文件名]  </span><br><span class="line"><span class="meta">#</span><span class="bash">多个文件创建</span></span><br><span class="line">touch [文件名1] [文件名2]....</span><br></pre></td></tr></table></figure>

<h3 id="移动mv"><a href="#移动mv" class="headerlink" title="移动mv"></a>移动mv</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将文件 aaa 更名为 bbb</span></span><br><span class="line">mv aaa bbb </span><br></pre></td></tr></table></figure>

<h3 id="创建目录mkdir"><a href="#创建目录mkdir" class="headerlink" title="创建目录mkdir"></a>创建目录mkdir</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir 目录名</span><br></pre></td></tr></table></figure>

<h3 id="文件目录列表ls"><a href="#文件目录列表ls" class="headerlink" title="文件目录列表ls"></a>文件目录列表ls</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看隐藏文件</span><br><span class="line">ls -a</span><br><span class="line">#查看文件和目录的详情列表</span><br><span class="line">ls -l</span><br><span class="line">#将文件依建立时间之先后次序列出</span><br><span class="line">ls -t</span><br><span class="line"></span><br><span class="line">#查看&#x2F;tmp下文件个数</span><br><span class="line">ls -a &#x2F;tmp | wc -l</span><br><span class="line">#查看&#x2F;tmp下文件个数 + 1(总用量)</span><br><span class="line">ls -al &#x2F;tmp | wc -l</span><br><span class="line">#将目录列表存到fileList.txt中</span><br><span class="line">ls -a &#x2F;tmp &gt;fileList.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210803143618372.png" alt="image-20210803143618372"></p>
<ul>
<li>各列含义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x</span><br><span class="line">第一个字符代表文件类型</span><br><span class="line">“-”:普通文件</span><br><span class="line"></span><br><span class="line">“d”:目录，字母&quot;d&quot;，是dirtectory(目录)的缩写</span><br><span class="line"></span><br><span class="line">“l”:链接文件。类似于windows下的快捷方式</span><br><span class="line"></span><br><span class="line">“b”:块设备文件(block)，一般置于&#x2F;dev目录下，设备文件是普通文件和程序访问硬件设备的入口，是很特殊的文件。没有文件大小，只有一个主设备号和一个辅设备号。一次传输数据为一整块的被称为块设备，如硬盘、光盘等。最小数据传输单位为一个数据块(通常一个数据块的大小为512字节)</span><br><span class="line"></span><br><span class="line">“c”:字符设备文件(character)，一般置于&#x2F;dev目录下，一次传输一个字节的设备被称为字符设备，如键盘、字符终端等，传输数据的最小单位为一个字节。</span><br><span class="line"></span><br><span class="line">“p”:命令管道文件。与shell编程有关的文件。</span><br><span class="line"></span><br><span class="line">“s”:sock文件。与shell编程有关的文件。</span><br><span class="line"></span><br><span class="line">后面9个字母表示该文件或目录的权限位</span><br><span class="line">r表是读 (Read) 、w表示写 (Write) 、x表示执行 (eXecute)</span><br><span class="line">前三个表示文件拥有者的权限，中间三个表示文件所属组拥有的权限，最后三个表示其他用户拥有的权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个字段：</span><br><span class="line">如果一个文件不是目录，此时这一字段表示这个文件所具有的硬链接数。</span><br><span class="line">如果是一个目录，则第2字段表示该目录所含子目录的个数。</span><br><span class="line">如果是一个空目录，这个目录的第二字段就是2，表示该目录下有两个子目录。</span><br><span class="line"></span><br><span class="line">第三个字段：</span><br><span class="line">文件（目录）拥有者</span><br><span class="line"></span><br><span class="line">第四个字段：</span><br><span class="line">文件（目录）拥有者所在的组</span><br><span class="line"></span><br><span class="line">第五个字段：</span><br><span class="line">文件所占用的空间(以字节为单位)</span><br><span class="line"></span><br><span class="line">第六个字段：</span><br><span class="line">文件（目录）最近访问（修改）时间</span><br><span class="line"></span><br><span class="line">第七个字段：</span><br><span class="line">文件名</span><br></pre></td></tr></table></figure>





<blockquote>
<p>参考链接：<a class="link"   href="https://blog.csdn.net/sjzs5590/article/details/8254527" >https://blog.csdn.net/sjzs5590/article/details/8254527<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="打包解压"><a href="#打包解压" class="headerlink" title="打包解压"></a>打包解压</h2><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">把文件解压到指定的目录下</span></span><br><span class="line">unzip -d /temp test.zip</span><br></pre></td></tr></table></figure>



<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有进程</span></span><br><span class="line">ps -aux</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730143136866.png" alt="image-20210730143136866"></p>
<ul>
<li>各列含义</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用户名</span></span><br><span class="line">USER </span><br><span class="line"><span class="meta">#</span><span class="bash">进程ID</span></span><br><span class="line">PID</span><br><span class="line"><span class="meta">#</span><span class="bash">进程占用的CPU百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">CPU</span></span><br><span class="line"><span class="meta">#</span><span class="bash">占用内存的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">MEM</span></span><br><span class="line"><span class="meta">#</span><span class="bash">该进程使用的虚拟內存量（KB）</span></span><br><span class="line">VSZ</span><br><span class="line"><span class="meta">#</span><span class="bash">该进程占用的固定內存量（KB）（驻留中页的数量）</span></span><br><span class="line">RSS</span><br><span class="line"><span class="meta">#</span><span class="bash">进程的状态</span></span><br><span class="line">STAT</span><br><span class="line"><span class="meta">#</span><span class="bash">该进程被触发启动时间</span></span><br><span class="line">START</span><br><span class="line"><span class="meta">#</span><span class="bash">该进程实际使用CPU运行的时间</span></span><br><span class="line">TIME</span><br></pre></td></tr></table></figure>

<ul>
<li>STAT状态位常见的状态字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:无法中断的休眠状态（通常 IO 的进程）；</span><br><span class="line">R:正在运行可中在队列中可过行的；</span><br><span class="line">S:处于休眠状态；</span><br><span class="line">T:停止或被追踪；</span><br><span class="line">X:死掉的进程 （基本很少见）；</span><br><span class="line">Z:僵尸进程；</span><br><span class="line">&lt;:优先级高的进程</span><br><span class="line">N:优先级较低的进程</span><br><span class="line">L:有些页被锁进内存；</span><br><span class="line">s:进程的领导者（在它之下有子进程）；</span><br><span class="line">l:多线程，克隆线程（使用 CLONE_THREAD, 类似 NPTL pthreads）；</span><br><span class="line">\+:位于后台的进程组</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2021/08/01/Elasticsearch/</url>
    <content><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><h2 id="Linux环境安装JDK"><a href="#Linux环境安装JDK" class="headerlink" title="Linux环境安装JDK"></a>Linux环境安装JDK</h2><ol>
<li><a class="link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >下载地址<i class="fas fa-external-link-alt"></i></a>，上传到/usr/local下，解压</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u301-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置环境变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>注：-bash: vim: 未找到命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">yum -y install vim*</span><br></pre></td></tr></table></figure>

<p>按i进入编辑，在profile文件尾部添加如下内容</p>
<p>export JAVA_HOME=/usr/local/jdk1.8.0_301  #jdk安装目录</p>
<p>export JRE_HOME=${JAVA_HOME}/jre</p>
<p>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH</p>
<p>export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin</p>
<p>export PATH=$PATH:${JAVA_PATH}</p>
<p>通过命令<strong>source /etc/profile</strong>让profile文件立即生效</p>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210727151210278.png" alt="image-20210727151210278"></p>
<hr>
<h2 id="Linux环境安装Elasticsearch"><a href="#Linux环境安装Elasticsearch" class="headerlink" title="Linux环境安装Elasticsearch"></a>Linux环境安装Elasticsearch</h2><p>前提环境：jdk8以上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">上传/usr/<span class="built_in">local</span>/下，解压</span></span><br><span class="line">tar -zvxf elasticsearch-7.13.4-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到bin</span></span><br><span class="line">cd /usr/local/elasticsearch-7.13.4/bin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">elasticsearch不能以root权限来运行</span></span><br><span class="line">adduser wanglei</span><br><span class="line">passwd ******</span><br><span class="line"><span class="meta">#</span><span class="bash">授权</span></span><br><span class="line">chown -R wanglei /usr/local/elasticsearch-7.13.4</span><br></pre></td></tr></table></figure>



<p>修改/usr/local/elasticsearch-7.13.4/conf/elasticsearch.yml配置network.host</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#目的：以便使用本地虚拟机外的本地网络通过ip访问</span><br><span class="line">network.host: 0.0.0.0;</span><br><span class="line">#切换用户</span><br><span class="line">su wanglei</span><br><span class="line">#启动</span><br><span class="line">.&#x2F;elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210728153052546.png" alt="image-20210728153052546"></p>
<p>注：启动失败</p>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210727163751938.png" alt="image-20210727163751938"></p>
<ul>
<li>问题：bootstrap check failure [1] of [3]: max number of threads [3795] for user [wanglei] is too low, increase to at least [4096]</li>
</ul>
<p>解决方法：</p>
<p>修改配置文件/etc/security/limits.conf，增加配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*     soft    nproc     4096</span><br><span class="line">*     hard    nproc     4096</span><br></pre></td></tr></table></figure>

<p>修改完成后查看是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimit -Hu</span><br><span class="line">ulimit -Su</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：bootstrap check failure [2] of [3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</li>
</ul>
<p>解决方法：</p>
<p>修改/etc/sysctl.conf文件，增加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.max_map_count&#x3D;262144</span><br><span class="line">#执行生效</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：bootstrap check failure [3] of [3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</li>
</ul>
<p>解决方法：</p>
<p>修改/usr/local/elasticsearch-7.13.4/conf/elasticsearch.yml，保留一个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章：1. <a class="link"   href="https://www.cnblogs.com/zhi-leaf/p/8484337.html" >https://www.cnblogs.com/zhi-leaf/p/8484337.html<i class="fas fa-external-link-alt"></i></a></p>
<p>​                   2. <a class="link"   href="https://blog.csdn.net/happyzxs/article/details/89156068" >https://blog.csdn.net/happyzxs/article/details/89156068<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看elastic</span></span><br><span class="line">ps -ef | grep elastic</span><br><span class="line"><span class="meta">#</span><span class="bash">后台运行</span></span><br><span class="line">./elasticsearch -d</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure>

<h2 id="Linux环境安装Nodejs"><a href="#Linux环境安装Nodejs" class="headerlink" title="Linux环境安装Nodejs"></a>Linux环境安装Nodejs</h2><ol>
<li><a class="link"   href="https://nodejs.org/en/download/" >下载地址<i class="fas fa-external-link-alt"></i></a>，解压</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v14.17.3-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>检查文件目录是否完整：检查node，npm，npx是否存在</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210727225955344.png" alt="image-20210727225955344"></p>
<ol start="3">
<li>创建软连接</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;node-v14.17.3-linux-x64&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;node-v14.17.3-linux-x64&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>注：/usr/local/node-v14.17.3-linux-x64/bin/npm|node此地址为安装的nodejs的文件的绝对地址下的npm或node所在位置，根据每个人的情况不同。</p>
<ol start="4">
<li>检查是否安装成功  node -v</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210727230506312.png" alt="image-20210727230506312"></p>
<ol start="5">
<li>修改 /etc/profile</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/node-v14.17.3-linux-x64/</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin</span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>通过命令<strong>source /etc/profile</strong>让profile文件立即生效</li>
</ol>
<blockquote>
<p>参考文章：<a class="link"   href="https://www.cnblogs.com/cirry/p/13599472.html" >https://www.cnblogs.com/cirry/p/13599472.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="Linux环境安装Elasticsearch-head"><a href="#Linux环境安装Elasticsearch-head" class="headerlink" title="Linux环境安装Elasticsearch-head"></a>Linux环境安装Elasticsearch-head</h2><p>前提环境：Nodejs</p>
<ol>
<li><a class="link"   href="https://github.com/mobz/elasticsearch-head" >下载地址<i class="fas fa-external-link-alt"></i></a>，上传，解压</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip elasticsearch-head-master.zip</span><br><span class="line">#改名</span><br><span class="line">mv elasticsearch-head-master elasticsearch-head</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;elasticsearch-head</span><br><span class="line"></span><br><span class="line">npm install -g grunt-cli</span><br><span class="line">npm install -g grunt</span><br><span class="line"></span><br><span class="line">#&#x2F;检测是否安装成功</span><br><span class="line">grunt -version</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改文件Gruntfile.js，添加hostname</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210728153200645.png" alt="image-20210728153200645"></p>
<ol start="4">
<li>跨域配置：</li>
</ol>
<p>修改”/usr/local/elasticsearch-7.13.4/config/elasticsearch.yml”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行</span><br><span class="line">grunt server</span><br><span class="line">#后台运行</span><br><span class="line">nohup npm run start &amp;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210728153008077.png" alt="image-20210728153008077"></p>
<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Local Npm module &quot;grunt-contrib-copy&quot; not found. Is it installed?</span><br><span class="line">Local Npm module &quot;grunt-contrib-concat&quot; not found. Is it installed?</span><br><span class="line">Local Npm module &quot;grunt-contrib-uglify&quot; not found. Is it installed?</span><br><span class="line">Local Npm module &quot;grunt-css&quot; not found. Is it installed?</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章：<a class="link"   href="https://blog.csdn.net/u014231523/article/details/96589154" >https://blog.csdn.net/u014231523/article/details/96589154<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="Linux环境安装Kibana"><a href="#Linux环境安装Kibana" class="headerlink" title="Linux环境安装Kibana"></a>Linux环境安装Kibana</h2><p>前提环境：Nodejs</p>
<p>Kibana要和Elasticsearch版本一致</p>
<ol>
<li>解压</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zvxf kibana-7.13.4-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置/usr/local/kibana-7.13.4-linux-x86_64/config/kibana.yml</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port: 5601 </span><br><span class="line"></span><br><span class="line">server.host: &quot;0.0.0.0&quot; </span><br><span class="line"></span><br><span class="line">elasticsearch.hosts: [&quot;http:&#x2F;&#x2F;localhost:9200&quot;] </span><br><span class="line"></span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br><span class="line"></span><br><span class="line">#汉化</span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>授权 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R wanglei &#x2F;usr&#x2F;local&#x2F;kibana</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su wanglei</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;kibana-7.13.4-linux-x86_64&#x2F;bin&#x2F;</span><br><span class="line">.&#x2F;kibana </span><br><span class="line"></span><br><span class="line">#后台运行</span><br><span class="line">.&#x2F;kibana &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章：<a class="link"   href="https://blog.csdn.net/qq_35551748/article/details/106960652" >https://blog.csdn.net/qq_35551748/article/details/106960652<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a class="link"   href="https://github.com/medcl/elasticsearch-analysis-ik/releases" >下载地址<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li>上传到/usr/local/elasticsearch-7.13.4/plugins/，解压</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录</span></span><br><span class="line">mkdir ik</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">unzip -d /usr/local/elasticsearch-7.13.4/plugins/ik elasticsearch-analysis-ik-7.13.4.zip</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动elasticsearch，检查是否安装成功</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./elasticsearch-plugin list</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730160225090.png" alt="image-20210730160225090"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>kibana测试</li>
</ul>
<p>ik_smart最少切分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;分词器&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730161622254.png" alt="image-20210730161622254"></p>
<p>ik_max_word最细粒度划分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;分词器&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730162228411.png" alt="image-20210730162228411"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>创建自己的词库字典，加入自己词组</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi wanglei.dic</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>切换到/usr/local/elasticsearch-7.13.4/plugins/ik/config</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi IKAnalyzer.cfg.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730165330629.png" alt="image-20210730165330629"></p>
<ol start="3">
<li>重启ElasticSearch</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730165659220.png" alt="image-20210730165659220"></p>
<h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><table>
<thead>
<tr>
<th>method</th>
<th>URL</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PUT</td>
<td>localhost:9200/索引名称/类型名称/文档ID</td>
<td>创建文档（指定文档ID）</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称</td>
<td>创建文档（随机文档ID）</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称/文档ID/_update</td>
<td>修改文档</td>
</tr>
<tr>
<td>DELETE</td>
<td>localhost:9200/索引名称/类型名称/文档ID</td>
<td>删除文档</td>
</tr>
<tr>
<td>GET</td>
<td>llocalhost:9200/索引名称/类型名称/文档ID</td>
<td>查询文档通过文档ID</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称/_search</td>
<td>查询所有数据</td>
</tr>
</tbody></table>
<h3 id="创建一个索引"><a href="#创建一个索引" class="headerlink" title="创建一个索引"></a>创建一个索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;test1&#x2F;type&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;王磊&quot;,</span><br><span class="line">  &quot;age&quot;: 23</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730171000866.png" alt="image-20210730171000866"></p>
<p>类型：</p>
<ul>
<li>字符串类型<ul>
<li>text</li>
<li>keyword</li>
</ul>
</li>
<li>数值类型<ul>
<li>long</li>
<li>integer</li>
<li>short</li>
<li>byte</li>
<li>double</li>
<li>float</li>
<li>half_float</li>
<li>scaled_float</li>
</ul>
</li>
<li>日期类型：date</li>
<li>布尔：boolean</li>
<li>二进制类型：binary</li>
</ul>
<p>……….</p>
<h3 id="指定类型"><a href="#指定类型" class="headerlink" title="指定类型"></a>指定类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birthday&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取索引基本信息"><a href="#获取索引基本信息" class="headerlink" title="获取索引基本信息"></a>获取索引基本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET test2</span><br></pre></td></tr></table></figure>

<p>扩展：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看elasticsearch信息</span><br><span class="line">GET _cat</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;test3&#x2F;_doc&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;: &quot;修改王磊&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE test2</span><br></pre></td></tr></table></figure>



<h2 id="文档基本操作"><a href="#文档基本操作" class="headerlink" title="文档基本操作"></a>文档基本操作</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;wanglei&#x2F;user&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;王磊&quot;,</span><br><span class="line">  &quot;age&quot;: 23,</span><br><span class="line">  &quot;desc&quot;: &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;技术&quot;,&quot;直男&quot;,&quot;温暖&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;wanglei&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730174250789.png" alt="image-20210730174250789"></p>
<h3 id="更新数据PUT"><a href="#更新数据PUT" class="headerlink" title="更新数据PUT"></a>更新数据PUT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;wanglei&#x2F;user&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;唐三&quot;,</span><br><span class="line">  &quot;age&quot;: 20,</span><br><span class="line">  &quot;desc&quot;: &quot;挂王&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;跳舞&quot;,&quot;原神&quot;,&quot;玩&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730174441578.png" alt="image-20210730174441578"></p>
<h3 id="更新数据POST"><a href="#更新数据POST" class="headerlink" title="更新数据POST"></a>更新数据POST</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;wanglei&#x2F;user&#x2F;2&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;: &quot;小舞&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;wanglei&#x2F;user&#x2F;_search?q&#x3D;name:唐三</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730180256110.png" alt="image-20210730180256110"></p>
<h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-结果过滤"><a href="#1-结果过滤" class="headerlink" title="1. 结果过滤"></a>1. 结果过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210801145234442.png" alt="image-20210801145234442"></p>
<h4 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;age&quot;,&quot;desc&quot;],</span><br><span class="line">  &quot;sort&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">      &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3. 分页查询"></a>3. 分页查询</h4><p>from:从第几个数据开始</p>
<p>size:单页面数据量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;age&quot;,&quot;desc&quot;],</span><br><span class="line">  &quot;sort&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">      </span><br><span class="line">      &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-多条件查询"><a href="#4-多条件查询" class="headerlink" title="4. 多条件查询"></a>4. 多条件查询</h4><ul>
<li>must—&gt;and</li>
</ul>
<p>查询描述为“一顿”并且年龄23的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &quot;23&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>should—&gt;or</li>
</ul>
<p>查询描述为“一顿”或者年龄23的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &quot;23&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>must_not相当于不等于</li>
</ul>
<p>查询描述不为“一顿”的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤器</li>
</ul>
<p>查询描述为“一顿”的数据并且进行过滤，过滤条件是年龄大于等于23</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 23</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多条件可以使用空格隔开</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 玩&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-精确查询"><a href="#5-精确查询" class="headerlink" title="5. 精确查询"></a>5. 精确查询</h4><p>term遇到keyword类型的字段，不会进行分词解析</p>
<p>keyword类型不会被分词器解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;desc&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT testdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;王磊es&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;王磊desc&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;王磊es2&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;王磊desc2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;王磊es&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;王磊es&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testdb&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;王&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testdb&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;王磊desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-精确查询多个值"><a href="#6-精确查询多个值" class="headerlink" title="6.  精确查询多个值"></a>6.  精确查询多个值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET testdb&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;王磊desc&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;desc&quot;: &quot;王磊desc2&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-高亮查询"><a href="#7-高亮查询" class="headerlink" title="7. 高亮查询"></a>7. 高亮查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210801171400994.png" alt="image-20210801171400994"></p>
<ul>
<li>自定义高亮</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET wanglei&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;一顿&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p style&#x3D;&#39;class&#x3D;&#39;key&#39; color: red&#39;&gt;&quot;, </span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210801171600828.png" alt="image-20210801171600828"></p>
<h2 id="Spring-Boot集成ES"><a href="#Spring-Boot集成ES" class="headerlink" title="Spring Boot集成ES"></a>Spring Boot集成ES</h2><p><a class="link"   href="https://gitee.com/carrywl/elastic-search-api" >gitee地址<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA-NIO</title>
    <url>/2021/08/03/JAVA-NIO/</url>
    <content><![CDATA[<h1 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA-NIO"></a>JAVA-NIO</h1><p><a class="link"   href="https://gitee.com/carrywl/java-basic/tree/master/src/main/java/com/wl/nio" >代码仓库<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="IO和NIO区别："><a href="#IO和NIO区别：" class="headerlink" title="IO和NIO区别："></a>IO和NIO区别：</h2><p>第一点：</p>
<ul>
<li>IO面向流：单向</li>
<li>NIO面向缓冲区：双向</li>
</ul>
<p>第二点：</p>
<ul>
<li>IO是阻塞IO</li>
<li>NIO是非阻塞IO</li>
</ul>
<p>第三点：</p>
<ul>
<li>NIO有选择器</li>
</ul>
<p>NIO的通道负责传输，缓冲区负责存储</p>
<h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>一：缓冲区就是数组，用于存储不同类型的数据。</p>
<p>根据类型不同（boolean除外），提供相应类型的缓冲区</p>
<ul>
<li>BytebBuffer</li>
<li>CharBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
</ul>
<p>一般都通过allocate()获取缓冲区</p>
<p>二：缓冲区存取数据的两个核心方法：</p>
<ul>
<li><p>push:存入数据到缓冲区</p>
</li>
<li><p>get:获取的缓冲区的数据</p>
</li>
</ul>
<p>三：缓冲区的四个核心属性：</p>
<ul>
<li>capactity:容量，表示缓冲区中最大存储数据的容量，一旦声明就不能改变。</li>
<li>limit:界限，表示缓冲区可以操作数据的大小。（limit后数据不能进行读写）</li>
<li>position:位置，表示缓冲区中正在操作数据的位置。</li>
<li>mark:标记，表示记录当前postion位置，可以通过reset()恢复到mark位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&lt;&#x3D;mark&lt;&#x3D;position&lt;&#x3D;limit&lt;&#x3D;capacity</span><br></pre></td></tr></table></figure>

<h3 id="直接缓冲区和非直接缓冲区"><a href="#直接缓冲区和非直接缓冲区" class="headerlink" title="直接缓冲区和非直接缓冲区"></a>直接缓冲区和非直接缓冲区</h3><p>非直接缓冲区：通过allocate()分配的缓冲区，将建立在JVM的内存中</p>
<p>直接缓冲区：通过allocateDirect()分配直接缓冲区，将建立在物理内存中，可以提高效率，但是消耗资源，有时候不稳定</p>
<h2 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h2><p>用于源节点与目标节点的连接</p>
<p>在Java NIO中负责缓冲区数据的传输</p>
<p>一：通道的主要实现类</p>
<p>java.nio.channels.Channel接口：</p>
<ul>
<li>FileChannel    本地</li>
<li>SocketChannel    TCP</li>
<li>ServerSocketChannel     TCP</li>
<li>DatagramChannel    UDP</li>
</ul>
<p>二：获取通道</p>
<ol>
<li>Java针对支持通道的类提供了getChannel</li>
</ol>
<ul>
<li><p>本地IO:</p>
<ul>
<li><p>FileInputStream/FileOutStream</p>
</li>
<li><p>RandomAccessFile</p>
</li>
</ul>
</li>
<li><p>网络IO:</p>
<ul>
<li>Socket</li>
<li>ServerSocket</li>
<li>DatagramSocket</li>
</ul>
</li>
</ul>
<ol start="2">
<li>在jdk7中的NIO.2针对各个通道提供了静态方法open()</li>
<li>在jdk7中的NIO.2的Files工具类的newByteChannel()</li>
</ol>
<p>三：通道之间的数据传输</p>
<ul>
<li>transferFrom</li>
<li>transferTo</li>
</ul>
<h2 id="分散与聚集"><a href="#分散与聚集" class="headerlink" title="分散与聚集"></a>分散与聚集</h2><p>分散（Scatter）读取：将通道中的数据分散到多个缓冲区中</p>
<p>聚集（Gather）写入：将多个缓冲区的数据聚集到通道中</p>
<h2 id="字符集Charset"><a href="#字符集Charset" class="headerlink" title="字符集Charset"></a>字符集Charset</h2><p>编码：字符串 -&gt; 字节数组</p>
<p>解码：字节数组 -&gt; 字符串 </p>
<h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>三个核心：</p>
<ul>
<li><p>通道(Channel)：负责连接</p>
<ul>
<li><p>java.nio.channels.Channel接口：</p>
<ul>
<li><p>SelectableChannel</p>
<ul>
<li>SocketChannel</li>
<li>ServerSocketChannel</li>
<li>DatagramChannel</li>
</ul>
<ul>
<li>Pipe.SinkChannel</li>
<li>Pipe.SourceChannel</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>缓冲区(Buffer)：负责数据的存取</p>
</li>
<li><p>选择器(Selector)：是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况</p>
</li>
</ul>
<h2 id="获取路径下的文件列表"><a href="#获取路径下的文件列表" class="headerlink" title="获取路径下的文件列表"></a>获取路径下的文件列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFileByPath</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	String folder = <span class="string">&quot;F:\\ideaWorkSpace&quot;</span>;</span><br><span class="line">    Path path = Paths.get(folder);</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    DirectoryStream&lt;Path&gt; dirStream = Files.newDirectoryStream(path);</span><br><span class="line">    <span class="keyword">for</span> (Path processPath : dirStream) &#123;</span><br><span class="line">        File file = processPath.toFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件最后修改时间:&quot;</span> + sdf.format(file.lastModified()));</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名:&quot;</span> + file.getName());</span><br><span class="line">     &#125;</span><br><span class="line">     dirStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210803220727621.png" alt="image-20210803220727621"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/2021/07/30/IDEA/</url>
    <content><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="问题1：在单元测试不能从控制台输入"><a href="#问题1：在单元测试不能从控制台输入" class="headerlink" title="问题1：在单元测试不能从控制台输入"></a>问题1：在单元测试不能从控制台输入</h2><p>解决：</p>
<ol>
<li>打开idea64.exe.vmoptions</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730103334931.png" alt="image-20210730103334931"></p>
<ol start="2">
<li>加上**-Deditable.java.test.console=true**</li>
</ol>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730103432943.png" alt="image-20210730103432943"></p>
<p>3.重启idea，成功</p>
<p><img src="https://gitee.com/carrywl/image-hosting/raw/master/image-codeStudy/image-20210730103509829.png" alt="image-20210730103509829"></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
</search>
